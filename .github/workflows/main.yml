# This is a basic workflow to help you get started with Actionss

name: CI

# Controls when the workflow will runn
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    types: [opened, synchronize]
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it 
      - uses: actions/checkout@v2

      # Configurando Projeto para o Build
      - name: Configurando Projeto para o Build
        run: |
          mkdir build ; cd build ; tar --exclude='../build' -zcf build.tar.gz ..
          tar -xzf build.tar.gz -C ../build ; rm -f build.tar.gz
        
      # Clonando o projeto build-pack da Mendix
      - name: Clonando o projeto build-pack da Mendix
        run: git clone https://github.com/mendix/docker-mendix-buildpack.git
        
      # Configurando build-pack 
      - name: Configurando build-pack
        run: mkdir deploy ; mv build docker-mendix-buildpack ; mv docker-mendix-buildpack deploy ; cd deploy ; cd docker-mendix-buildpack
  
      # Gerando a Variaveis de ambiente
      - name: Gerando a Variaveis de ambiente
        run: |
          cd deploy/docker-mendix-buildpack
          echo "CF_BUILDPACK_VERSION="$(cat cf-buildpack.version)  >> $GITHUB_ENV
          echo "ROOTFS_VERSION="$(cat rootfs.version)  >> $GITHUB_ENV          
          
      # Bildando a Imagem
      - name: Bildando a Imagem
        run: |
          cd deploy/docker-mendix-buildpack 
          docker build \
          --build-arg BUILD_PATH=build \
          --build-arg CF_BUILDPACK=${{ env.CF_BUILDPACK_VERSION }} \
          --build-arg ROOTFS_IMAGE=${{ env.ROOTFS_VERSION }} \
          -t mendix/mendix-buildpack-ci .
          
      # Subindo e Validando a Aplicação
      - name: Subindo e Validando a Aplicação
        run: |
         sh test-app.sh docker-compose-hsqldb.yml
  merge-me:
    name: Merge me!
    needs:
      # List all required job names here.
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Merge me!
        uses: ridedott/merge-me-action@v2
        with:
          # Depending on branch protection rules, a  manually populated
          # `GITHUB_TOKEN_WORKAROUND` secret with permissions to push to
          # a protected branch must be used. This secret can have an arbitrary
          # name, as an example, this repository uses `DOTTBOTT_TOKEN`.
          #
          # When using a custom token, it is recommended to leave the following
          # comment for other developers to be aware of the reasoning behind it:
          #
          # This must be used as GitHub Actions token does not support pushing
          # to protected branches.
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
    timeout-minutes: 5
